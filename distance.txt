import time
import RPi.GPIO as GPIO
#import time

#GPIO Mode (BOARD / BCM)
GPIO.setmode(GPIO.BCM)

#set GPIO Pins
GPIO_TRIGGER = 24
GPIO_ECHO = 23

#set GPIO direction (IN / OUT)
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)
GPIO.setwarnings(False)
GPIO.setup(17,GPIO.OUT)
GPIO.setup(27,GPIO.OUT)
GPIO.setup(10,GPIO.OUT)
GPIO.setup(9,GPIO.OUT)

def forward():
    print ("forward")
    GPIO.output(17,GPIO.HIGH)
    GPIO.output(27,GPIO.LOW)
    
def stop():
    
    GPIO.output(17,GPIO.LOW)
    GPIO.output(27,GPIO.LOW)
    print ("stop")
    
def turnleft():
    print ("turn left")
    GPIO.output(10,GPIO.HIGH)
    GPIO.output(9,GPIO.LOW)
    GPIO.output(17,GPIO.HIGH)
    GPIO.output(27,GPIO.LOW)
def turnright():
    print ("turn right")
    GPIO.output(9,GPIO.HIGH)
    GPIO.output(10,GPIO.LOW)
    GPIO.output(17,GPIO.HIGH)
    GPIO.output(27,GPIO.LOW)
    

def distance():
    # set Trigger to HIGH
    GPIO.output(GPIO_TRIGGER, True)

    # set Trigger after 0.01ms to LOW
    time.sleep(0)
    GPIO.output(GPIO_TRIGGER, False)

    StartTime = time.time()
    StopTime = time.time()

    # save StartTime
    while GPIO.input(GPIO_ECHO) == 0:
        StartTime = time.time()

    # save time of arrival
    while GPIO.input(GPIO_ECHO) == 1:
        StopTime = time.time()

    # time difference between start and arrival
    Duration = StopTime - StartTime
    # multiply with the sonic speed (34300 cm/s)
    # and divide by 2, because there and back
    distance = (Duration * 34300) / 2

    return distance

try:
    while True:
        dist = distance()
        print (" Distance = %.1f cm" % dist)
        time.sleep(1)
            
        if(dist <= 20):
            stop()
                
        else:
            forward()
                
        # Reset by pressing CTRL + C
except KeyboardInterrupt:
    print(" stopped by User")
    GPIO.cleanup()

