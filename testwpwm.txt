# import the necessary packages

import RPi.GPIO as GPIO
from time import sleep
from picamera.array import PiRGBArray
from scipy.stats import itemfreq
from picamera import PiCamera
import numpy as np
import time
import cv2
GPIO.setmode(GPIO.BCM)

#set GPIO Pins
GPIO_TRIGGER = 24
GPIO_ECHO = 23

#set GPIO direction (IN / OUT)
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)
GPIO.setwarnings(False)
GPIO.setup(17,GPIO.OUT)
GPIO.setup(27,GPIO.OUT)
GPIO.setup(10,GPIO.OUT)
GPIO.setup(9,GPIO.OUT)

def forward():
    print ("Forward")
    GPIO.output(27,GPIO.HIGH)
    GPIO.output(17,GPIO.LOW)
    GPIO.output(10,GPIO.HIGH)
    GPIO.output(9,GPIO.LOW)
      
def turnleft():
    print ("Turn left")
    GPIO.output(27,GPIO.HIGH)
    GPIO.output(17,GPIO.LOW)
    GPIO.output(10,GPIO.LOW)
    GPIO.output(9,GPIO.LOW)
    sleep(0.42)
    
def turnright():
    print ("Turn right")
    GPIO.output(10,GPIO.HIGH)
    GPIO.output(9,GPIO.LOW)
    GPIO.output(27,GPIO.LOW)
    GPIO.output(17,GPIO.LOW)
    sleep(0.42)
    
def stop():    
    GPIO.output(17,GPIO.LOW)
    GPIO.output(27,GPIO.LOW)
    GPIO.output(10,GPIO.LOW)
    GPIO.output(9,GPIO.LOW)
    print ("Stop")

def distance():
    # set Trigger to HIGH
    GPIO.output(GPIO_TRIGGER, True)

    # set Trigger after 0.01ms to LOW
    GPIO.output(GPIO_TRIGGER, False)

    StartTime = time.time()
    StopTime = time.time()

    # save StartTime
    while GPIO.input(GPIO_ECHO) == 0:
        StartTime = time.time()

    # save time of arrival
    while GPIO.input(GPIO_ECHO) == 1:
        StopTime = time.time()

    # time difference between start and arrival
    Duration = StopTime - StartTime
    distance = (Duration * 34300) / 2

    return distance

def get_dominant_color(image, n_colors):
    pixels = np.float32(image).reshape((-1, 3))
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 200, .1)
    flags = cv2.KMEANS_RANDOM_CENTERS
    flags, labels, centroids = cv2.kmeans(
        pixels, n_colors, None, criteria, 10, flags)
    palette = np.uint8(centroids)
    return palette[np.argmax(itemfreq(labels)[:, -1])]


clicked = False
def onMouse(event, x, y, flags, param):
    global clicked
    if event == cv2.EVENT_LBUTTONUP:
        clicked = True
        
def region_of_interest(img, vertices):
    #กำหนดเมทริกซ์เปล่าที่ตรงกับความสูงของภาพ / ความกว้าง
    mask = np.zeros_like(img)
    #เรียกดูจำนวนช่องสีของภาพ 
    channel_count = img.shape[2]
    # สร้างสีที่ตรงกับจำนวนช่องสีเดียวกัน 
    match_mask_color = (255,) * channel_count
    # กรอกข้อมูลลงในรูปหลายเหลี่ยม
    cv2.fillPoly(mask, vertices, match_mask_color)
    # การคืนค่ารูปภาพเฉพาะที่ตำแหน่ง mask mask ตรงกับ
    masked_image = cv2.bitwise_and(img, mask)
    return masked_image

region_of_interest_vertices = [
    (0, 190),(46, 80), (218, 80), (304, 190)
]

# initialize the camera and grab a reference to the raw camera capture
camera = PiCamera()
camera.resolution = (320, 240)
camera.framerate = 32
rawCapture = PiRGBArray(camera, size=(320, 240))

# allow the camera to warmup

# capture frames from the camera
for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
    #while success and not clicked:
        frame = frame.array
        graycir = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        img = cv2.medianBlur(graycir, 37)
        circles = cv2.HoughCircles(img, cv2.HOUGH_GRADIENT,1, 50, param1=120, param2=40)
        edges = cv2.Canny(frame, 50, 200,3)
        dst = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)
        cv2.imshow("dst", edges)
        roi_image = region_of_interest(dst,np.array([region_of_interest_vertices], np.int32))
        gray = cv2.cvtColor(roi_image, cv2.COLOR_BGR2GRAY)
        cv2.imshow("gray", gray)
        x = 152
        y = 156
        lines = cv2.HoughLinesP(gray, 1, np.pi/180, 60,minLineLength=30, maxLineGap=100)
        
        if not circles is None:
            circles = np.uint16(np.around(circles))
            max_r, max_i = 0, 0
            for i in range(len(circles[:, :, 2][0])):
                if circles[:, :, 2][0][i] > 50 and circles[:, :, 2][0][i] > max_r:
                    max_i = i
                    max_r = circles[:, :, 2][0][i]
            x, y, r = circles[:, :, :][0][max_i]
            if y > r and x > r:
                square = frame[y-r:y+r, x-r:x+r]

                dominant_color = get_dominant_color(square, 2)
                if dominant_color[2] > 100:
                    stop()
                    break
                
                else:
                    print("N/A")

            for i in circles[0, :]:
                cv2.circle(frame, (i[0], i[1]), i[2], (0, 255, 0), 2)
                cv2.circle(frame, (i[0], i[1]), 2, (0, 0, 255), 3)
        
        if lines is not None:
            for line in lines:
                x1, y1, x2, y2 = line[0]
                cv2.line(frame, (x1, y1), (x2, y2), (0, 255, 0), 3,8)
                
                cv2.circle(frame,(x1,y1), 3, (255,255,255),8,0)
                cv2.circle(frame,(x2,y2), 3, (255,0,0), 8,0)
               # print("x1 :",x1,"x2 :",x2,"y1 : ",y1 , "y2 : ",y2)
                                                
            xl=0; xr=0
            
            if x1 < 151 :
                mleft = (y2 - y1)/(x2 - x1) #fine ml                
                xl = (y-y1+mleft*x1)/mleft #fine xl                             
                #print("xl : ",xl , "mleft : " , mleft)
                
            if x1 > 153  :
                mright = (y2 - y1)/(x2 - x1)  #fine mr
                xr = (y-y1+mright*x1)/mright
                #print("xr : ", xr,"mright : " , mright )
                            
            sl = abs(xl-x)
            sr = abs(xr-x)
            print("sl-sr = ",abs(sl-sr))
            if abs(sl-sr)>120:
                if sl>sr:
                    turnleft()
                                        

                if sl< sr:
                    turnright()
                                        
            else :
                
                forward()

	
	# show the frame
        print("-----------------------")
        cv2.imshow("Frame", frame)
        key = cv2.waitKey(1) & 0xFF
        rawCapture.truncate(0)
        if key == ord("q"):
            break
cv2.destroyAllWindows()
stop()
GPIO.cleanup()
 
