from matplotlib import pyplot as plt
import matplotlib.image as mpimg
from picamera import PiCamera
import math
import numpy as np
import time
import cv2

def region_of_interest(img, vertices):
    #กำหนดเมทริกซ์เปล่าที่ตรงกับความสูงของภาพ / ความกว้าง
    mask = np.zeros_like(img)
    #เรียกดูจำนวนช่องสีของภาพ 
    channel_count = img.shape[2]
    # สร้างสีที่ตรงกับจำนวนช่องสีเดียวกัน 
    match_mask_color = (255,) * channel_count
    # กรอกข้อมูลลงในรูปหลายเหลี่ยม
    cv2.fillPoly(mask, vertices, match_mask_color)
    # การคืนค่ารูปภาพเฉพาะที่ตำแหน่ง mask mask ตรงกับ
    masked_image = cv2.bitwise_and(img, mask)
    return masked_image
region_of_interest_vertices = [
    (-6, 190),(152, 100), (310, 190)
]
def draw_lines(img, lines, color=[255, 0, 0], thickness=3):
    # If there are no lines to draw, exit.
    if lines is None:
        return
    img = np.copy(img)
    line_img = np.zeros((img.shape[0],img.shape[1],3),dtype=np.uint8,)
    for line in lines:
        for x1, y1, x2, y2 in line:
            cv2.line(line_img, (x1, y1), (x2, y2), color, thickness)

    img = cv2.addWeighted(img, 0.8,line_img, 1.0, 0.0)
            # Return the modified image.
    return img

cap = cv2.VideoCapture("challenge.mp4")
while(True) :
    
	ret,frame = cap.read()
	image = cv2.resize(frame ,(304,208))
	gray_first = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)	
	edges = cv2.Canny(gray_first, 200,300)
	dst = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)
	roi_image = region_of_interest(dst,np.array([region_of_interest_vertices], np.int32))
	gray = cv2.cvtColor(roi_image, cv2.COLOR_BGR2GRAY)
	cv2.imshow("gray", roi_image)

	x = 152
	y = 156
	
	lines = cv2.HoughLinesP(gray,rho=6,theta=np.pi / 60,threshold=160,lines=np.array([]),minLineLength=40,maxLineGap=25)
		
	left_line_x = []
	left_line_y = []
	right_line_x = []
	right_line_y = []
	
	for line in lines:
            for x1, y1, x2, y2 in line:
                slope = (y2 - y1) / (x2 - x1)
                if math.fabs(slope) < 0.5:
                    continue
                if slope <= 0:
                    left_line_x.extend([x1, x2])
                    left_line_y.extend([y1, y2])
                else: # <-- Otherwise, right group.
                    right_line_x.extend([x1, x2])
                    right_line_y.extend([y1, y2])
              
	
	
	
	line_image = draw_lines(
            image,
            [[
                [left_line_x.extend([x1, x2]), left_line_y.extend([y1, y2])],
                [right_line_x.extend([x1, x2]), right_line_y.extend([y1, y2])],
            ]],
            thickness=5,
        )
	
	cv2.imshow("Frame", image)
	cv2.imshow("line", line_img)
	
	
	key = cv2.waitKey(1) & 0xFF	
	#rawCapture.truncate(0)
 
	if key == ord("q"):
		break
cv2.destroyAllWindows()
cap.release()
"""
min_y = image.shape[0] * (3 / 5)
	max_y = image.shape[0]
	poly_left = np.poly1d(np.polyfit(
            left_line_y,
            left_line_x,
            deg=1
            
        ))
	left_x_start = int(poly_left(max_y))
	left_x_end = int(poly_left(min_y))
	poly_right = np.poly1d(np.polyfit(
            right_line_y,
            right_line_x,
            deg=1
            
        ))
	right_x_start = int(poly_right(max_y))
	right_x_end = int(poly_right(min_y))
"""
 
